name: Build and deploy

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["deploy"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/package-lock.json

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build Frontend
        run: npm run buildpipeline
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist/bibaboulder/browser
          name: Frontend_Build

  pack_backend:
    name: Pack backend
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-versions: ["8.3"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Backend_Build
          path: ${{ env.BUILD_PATH }}/backend


  backend-deploy:
    name: Deploy Backend to FTP
    runs-on: ubuntu-latest
    permissions:
        contents: write

    needs: [pack_backend, build]

    steps:
    - name: Download Backend artifact
      uses: actions/download-artifact@v4
      with:
        name: Backend_Build

    # - name: Create .env file
    #   run: |
    #     echo "APP_ENV=prod" > .env

    - name: Create .env.local.php file
      run: |
        echo "<?php" >> .env.local.php
        echo "// This file is generated in the deploy script " >> .env.local.php
        echo "" >> .env.local.php
        echo "return array (" >> .env.local.php
        echo "  'APP_ENV' => 'prod'," >> .env.local.php
        echo "  'SYMFONY_DOTENV_PATH' => './.env'," >> .env.local.php
        echo "  'APP_SECRET' => '${{ secrets.APP_SECRET }}'," >> .env.local.php
        echo "  'DATABASE_URL' => '${{ secrets.DATABASE_URL }}'," >> .env.local.php
        echo "  'TESTVAR' => '${{ secrets.TESTVAR }}'," >> .env.local.php
        echo "  'TESTINGPASSCODE' => '${{ secrets.TESTINGPASSCODE }}'," >> .env.local.php
        echo "  'CORS_ALLOW_ORIGIN' => '^https?://(bibaboulder.thecell.eu|boulderapi.thecell.eu|localhost|127\.0\.0\.1)(:[0-9]+)?$'," >> .env.local.php
        echo ");" >> .env.local.php
        echo "?>" >> .env.local.php

    - run: ls -R

    - name: Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: boulderapi.thecell.eu
        username: ${{ secrets.API_FTPUSER }}
        password: ${{ secrets.API_FTPPASSWORD }}
        protocol: ftp
        port: 21
        local-dir: ./

  web-deploy:
    name: Deploy Frontend to FTP
    runs-on: ubuntu-latest
    permissions:
        contents: write

    needs: [build, pack_backend]

    steps:
    - name: Download Frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: Frontend_Build

    - name: extract artifact for deployment
    # x – instructs tar to extract the files from the zipped file
    # v – means verbose, or to list out the files it’s extracting
    # f – tells tar the filename you want it to work on
      run: tar -xvf artifact.tar -C ./

    - run: rm *.tar

    - run: ls -R

    - name: Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: bibaboulder.thecell.eu
        username: ${{ secrets.FTPUSER }}
        password: ${{ secrets.FTPPASSWORD }}
        protocol: ftp
        port: 21
        local-dir: ./
