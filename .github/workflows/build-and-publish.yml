name: Build and deploy

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["deploy"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "21"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/package-lock.json

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build Frontend
        run: npm run buildpipeline
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist/bibaboulder/browser
          name: Frontend_Build

  pack_backend:
    name: Pack backend
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-versions: ["8.3"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: xdebug
          tools: composer:v2
          extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, pgsql, dom, filter, gd, json, mbstring, pdo
        env:
          update: true

      - name: Print PHP version
        working-directory: ./backend
        run: echo ${{ steps.setup-php.outputs.php-version }}

      # - name: Get composer cache directory
      #   id: composer-cache
      #   working-directory: ./backend
      #   run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      # - name: Cache composer dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ steps.composer-cache.outputs.dir }}
      #     # Use composer.json for key, if composer.lock is not committed.
      #     # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
      #     key: ${{ runner.os }}-composer-${{ hashFiles('/composer.lock') }}
      #     restore-keys: ${{ runner.os }}-composer-

      # Log the PHP version in use, and copy the "prod" env file to the "local" env file
      - name: PHP utils
        working-directory: ./backend
        run: |
          php -v
          cp .env.prod .env.local
        # todo replace the env before deploy

      # Install composer dependencies, and dump env
      - name: Composer install & dump-env
        working-directory: ./backend
        run: |
              composer install --no-dev --no-progress --prefer-dist -a
              composer dump-env prod

      # - name: Install Composer dependencies
      #   working-directory: ./backend
      #   run: composer install --no-progress --prefer-dist --optimize-autoloader

      # —— Symfony ——————————————————————————————————————————————————————————
      - name: Install and Check Symfony requirements
        working-directory: ./backend
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash
          sudo apt install symfony-cli
          symfony check:requirements
          php bin/console -V

      # - name: Check Symfony requirements
      #   working-directory: ./backend
      #   run: |
      #     echo 'deb [trusted=yes] https://repo.symfony.com/apt/ /' |sudo tee /etc/apt/sources.list.d/symfony-cli.list
      #     sudo apt update
      #     sudo apt install symfony-cli
      #     symfony check:requirements
      #     php bin/console -V

      # —— Code style —— (Based on this package: https://github.com/OskarStark/php-cs-fixer-ga)
      # - name: PHP-CS-Fixer
      #  uses: docker://oskarstark/php-cs-fixer-ga
      #  with:
      #    args: --config=.php_cs.dist --diff --dry-run

      # - name: Setup Database
      #   run: |
      #     docker compose up -d postgres
      #     sleep 10
      #     docker ps -a
      # - name: Run Migrations
      #   run: |
      #     php ./bin/console doctrine:schema:create -n
      #     php ./bin/console doctrine:fixtures:load --purge-with-truncate -n

      # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
      # Docs: https://getcomposer.org/doc/articles/scripts.md
      # - name: Run Tests
      #   run: |
      #     composer run-script test

      - name: Check files
        working-directory: ./backend
        run: ls -R

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Backend_Build
          path: |
            ${{ env.BUILD_PATH }}/backend
            !${{ env.BUILD_PATH }}/backend/migrations
            !${{ env.BUILD_PATH }}/backend/vendor
            !${{ env.BUILD_PATH }}/backend/var

  web-deploy:
    name: Deploy to FTP
    runs-on: ubuntu-latest
    permissions:
        contents: write

    needs: [build, pack_backend]

    steps:
    - name: Download Backend artifact
      uses: actions/download-artifact@v4
      with:
        name: Backend_Build

    - run: mkdir api

    - run: ls -R

    - run: ls | grep -v api | xargs mv -t api

    - run: ls -R

    # - name: Create env
    #   run: |
    #     docker compose up -d postgres

    # - name: extract artifact for deployment
    # x – instructs tar to extract the files from the zipped file
    # v – means verbose, or to list out the files it’s extracting
    # f – tells tar the filename you want it to work on
      # run: tar -xvf artifact.tar -C /api

    - name: Download Backend artifact
      uses: actions/download-artifact@v4
      with:
        name: Frontend_Build

    - name: extract artifact for deployment
    # x – instructs tar to extract the files from the zipped file
    # v – means verbose, or to list out the files it’s extracting
    # f – tells tar the filename you want it to work on
      run: tar -xvf artifact.tar -C ./

    - run: rm *.tar

    - run: ls -R

    - name: Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: bibaboulder.thecell.eu
        username: ${{ secrets.FTPUSER }}
        password: ${{ secrets.FTPPASSWORD }}
        protocol: ftp
        port: 21
        local-dir: ./
